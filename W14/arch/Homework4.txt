1. Local variables in jasmin and registers are similar in the fact that they are both used to store data and
they are quick forms in which to get data from in order to use.

2. They are differ in how they are used. When you put data in a register it is usually to use it for some other task 
and once you have used it the data is either outputed or stored back in memory. When you use a local variable it is 
usually for some data that you are going to continually use so you load it on the stack and store it back into the
local variable.

3. I would say stacks and registers operate very much with the same purpose. When we built our SAM in fall quarter
we used registers to load data onto in order to perform operations. If you wanted to add two numbers, you would
have to load them on a register and then that data would be pushed through an adder and put back on the register. The
stack operates pretty much like this. Two add two numbers, you load your numbers on the stack then load the add function
and the two numbers getted added and the sum gets put back on the stack. So, registers and stacks are very much alike.

4. Top to bottom of stack:

    ldc 5
    ldc 7
    getstatic java/lang/System/out Ljava/io/PrintStream;

5. A 128-bit register could add two 128 bit numbers in a single operation, while a 64-bit register would require two,
thus the 128-bit register would be faster in these cases.

6. 1)Fetch stage 2)Dispatch stage 3)Execute stage 4)Complete/writeback stage

7. RISC instructions are all the same length and can be fetched in a single operation, while CISC instructions 
are varied in length and might have to be fetched in more than one operation.

8. A linked list is an ordered set of data elements, each containing a link to its successor 
(and sometimes its predecessor).

9. You can use virtual memory to use more memory than might be physically available. You can use virtual memory
to free applications from having to manage a shared memory space.
   
